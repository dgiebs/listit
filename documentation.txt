pip3 install --user -r requirements.txt

flask run

Run phpliteadmin listit.db to view the SQLite tables.

Welcome to List it! In order to access the website, simply run it in CS50 ide's web server, as
it is implemented using Flask. When you first open the website, you will land on a front page
which briefly describes the purpose of the website and how it functions. The idea is for 
student organizations to be able to register events and for other students to be able to view
those, and search for them using key words.

Although anyone can view events, one must register in order to add or edit events. The user will
need to register, and will be prompted for his name, username, HUID, a password and the student
organization to which they belong. The name will be compared to the database of the Harvard
students' names in the Harvard Facebook, and will not be accepted if it does not match one of
them. The HUID is merely used in order to reclaim a forgotten password or forgotten Username.
The student organizations are directly taken from the OSL's website. 

The user will then be able to add events, by filling in a short form, which includes a start and
an end date and time, a name, type of event, and also gives the option of adding a picture and 
any link that might be relevant to the event. The user can also edit or delete events that he or
she has created, when viewing them. 

Accessible to all users are pages like Search, which allow any user to search for an event 
according to three different criteria: the name of the event, its location, if added by the
creator of the event, and the start date. If there are existing results, they will appear in a
chronological list and can be viewed individually. If there are none, an error message will be 
returned on the top of the page. 

Users can view all events in a calendar format (/viewcal). Each event can be added to one's
own calendar on each event's viewevent page. *NOTE: the add to google calendar feature will not
work unless accessed from the cloud9 account danielgiebisch. This is because Google's API credential
service requires that you tell Google what uri to expect (http://ide50-danielgiebisch.cs50.io/oauth2callback
in this case). You can see it working in the video, and we can demonstrate it working for 
anyone who wishes to see it.